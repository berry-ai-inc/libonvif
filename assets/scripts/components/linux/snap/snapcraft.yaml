name: onvif-gui
base: core24
summary: GUI application for ONVIF compatible cameras
description: |
  A graphical interface for working with ONVIF compatible IP cameras. This application can discover cameras on
  the network, control camera parameters and display camera output. Multiple cameras can be viewed simuoltaneously
  in the display. Camera output can be recorded to disk archive. Cameras can be configured to use lower resolution
  streams during real time operation to conserve resources and to stream high resolution output to disk archive
  for maximum observability.
  
  The application is equipped with a built in yolox model for computer vision analysis of real time stream data
  to generate alarms and recordings. The application includes built in OpenVINO compute runtime drivers so that
  computers with Intel CPU can leverage iGPU compute power to increase the number of streams that can be analyzed.
  
version: 3.1.10

grade: stable
confinement: strict

platforms:
  amd64:

plugs:
  intel-npu:
    interface: custom-device
    custom-device: intel-npu-device
  npu-libs:
    interface: content
    content: npu-libs-2404
    target: $SNAP/npu-libs

apps:
  onvif-gui:
    command: bin/onvif-gui
    extensions: [gnome]
    plugs:
      - network
      - wayland
      - pulseaudio
      - x11
      - desktop
      - desktop-legacy
      - opengl
      - home
      - intel-npu
      - npu-libs
    environment:
      LD_LIBRARY_PATH: $SNAP/npu-libs:$SNAP/usr/local/lib:$LD_LIBRARY_PATH
      OCL_ICD_VENDORS: $SNAP/etc/OpenCL/vendors

parts:
  onvif-gui:
    source: .
    plugin: python
    python-packages:
      - openvino
      - onvif-gui
      - https://download.pytorch.org/whl/cpu/torch-2.7.0%2Bcpu-cp312-cp312-manylinux_2_28_x86_64.whl#sha256=64123c05615e27368c7a7816f6e39c6d219998693beabde0b0b9cedf91b5ed8b
      - https://download.pytorch.org/whl/cpu/torchvision-0.22.0%2Bcpu-cp312-cp312-manylinux_2_28_x86_64.whl#sha256=effb34eabe87ae0d811fe2d6e3433ed1eee2d1850ff0670964d1475a06512c73

    override-build: |
      craftctl default
      mkdir -p "${CRAFT_PART_INSTALL}"/bin
      intel_icd="${CRAFT_PART_INSTALL}"/etc/OpenCL/vendors/intel.icd
      intel_icd_so_path=$(cat ${intel_icd})
      base_path="/snap/${SNAPCRAFT_PROJECT_NAME}/current"
      echo "${base_path}""${intel_icd_so_path}" > "${intel_icd}"

    stage-packages:
      - intel-opencl-icd
      - libxcb-cursor-dev
